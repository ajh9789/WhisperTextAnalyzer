services:
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    restart: always
  stt_worker:
    build:
      context: ./stt_worker
    command: celery -A stt_worker:celery worker --loglevel=info
    environment:
      - REDIS_HOST=redis
      - DOCKER=1
    depends_on:
      - redis
    restart: always

  analyzer_worker:
    build:
      context: ./analyzer_worker
    command: celery -A analyzer_worker:celery worker --loglevel=info
    environment:
      - REDIS_HOST=redis
      - DOCKER=1
    depends_on:
      - redis
    restart: always

  listener_service:
    build:
      context: ./listener_service
    command: python3 listener_service.py
    environment:
      - REDIS_HOST=redis
      - DOCKER=1
    depends_on:
      - redis
    restart: always

  fastapi_service:
    build:
      context: ./fastapi_service
    ports:
      - "8000:8000"
    environment:
      - REDIS_HOST=redis
      - DOCKER=1
    depends_on:
      - redis
    restart: always
    command: uvicorn fastapi_service:app --host 0.0.0.0 --port 8000
# ✅ 리눅스 배포 시 실행 명령어 예시
# docker-compose up --scale stt_worker=2 -d

# ==========================
# ✅ 설명
# - stt_worker 단일 서비스 정의
# - 배포 시 컨테이너 개수 조절 (--scale)
# - 윈도우용 pool=solo 제거 → 리눅스 최적화 완성
# 윈도우용 --concurrency=1 --pool=solo

#  recorder_service:
#    build:
#      context: ./recorder_service
#    command: python3 recorder_service.py
#    environment:
#      - REDIS_HOST=redis
#      - DOCKER=1
#    depends_on:
#      - redis