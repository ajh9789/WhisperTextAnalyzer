services:
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    restart: always

  stt_worker:
    build:
      context: ./stt_worker
    command: >
      celery -A stt_worker:celery worker --loglevel=info
    environment:
      - REDIS_HOST=redis
      - DOCKER=1
    depends_on:
      - redis
    restart: always

  analyzer_worker:
    build:
      context: ./analyzer_worker
    command: >
      celery -A analyzer_worker:celery worker --loglevel=info
    environment:
      - REDIS_HOST=redis
      - DOCKER=1
    depends_on:
      - redis
    restart: always

  listener_service:
    build:
      context: ./listener_service
    command: python3 listener_service.py
    environment:
      - REDIS_HOST=redis
      - DOCKER=1
    depends_on:
      - redis
    restart: always

  fastapi_service:
    build:
      context: ./fastapi_service
    ports:
      - "8000:8000"
    command: >
      uvicorn fastapi_service:app --host 0.0.0.0 --port 8000
    environment:
      - REDIS_HOST=redis
      - DOCKER=1
    depends_on:
      - redis
    restart: always

# ✅ 리눅스 배포 시 실행 명령어 예시
# docker compose up --scale stt_worker=2 -d

# ==========================
# ✅ 설명
# - 모든 worker의 -Q 제거 → 기본 "celery" queue 사용
# - 개발/테스트 환경에서는 가장 안정적 (queue 충돌 위험 없음)
# - 컨테이너 개수 조절 가능 (--scale)
